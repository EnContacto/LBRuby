name: Deploy to EC2 from DockerHub

on:
  push:
    branches:
      - QA
  pull_request:
    branches:
      - main

env:
  DOCKER_REPOSITORY: ztencontacto/myapp
  QA_APP_PORT: 4568
  PROD_APP_PORT: 4568

jobs:
  # Job 1: Construcción y publicación en DockerHub
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [qa, prod] # Etiquetas definidas directamente en minúsculas

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image for ${{ matrix.environment }}..."
          docker build -t ${{ env.DOCKER_REPOSITORY }}:${{ matrix.environment }} .
          echo "Pushing Docker image to DockerHub..."
          docker push ${{ env.DOCKER_REPOSITORY }}:${{ matrix.environment }}
          echo "Docker image built and pushed successfully for ${{ matrix.environment }}."

  # Job 2: Despliegue en QA
  deploy-to-qa:
    needs: build-and-push
    if: github.ref == 'refs/heads/QA'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy QA Image to EC2 Hosts
        run: |
          echo "Deploying QA Docker images to EC2 Hosts..."
          echo "${{ secrets.EC2_KEY_QA }}" > /tmp/qa_key
          chmod 600 /tmp/qa_key
          PORT=${{ env.QA_APP_PORT }}
          for HOST in "${{ secrets.EC2_HOST_QA_1 }},${{ secrets.EC2_HOST_QA_2 }}"; do
            echo "Deploying to $HOST on port $PORT..."
            ssh -o StrictHostKeyChecking=no -i /tmp/qa_key ec2-user@$HOST "
              if ! command -v docker &> /dev/null; then
                echo 'Installing Docker...'
                sudo yum update -y
                sudo yum install -y docker
                sudo service docker start
                sudo usermod -aG docker ec2-user
              fi
              echo 'Pulling QA Docker image...'
              sudo docker pull ${{ env.DOCKER_REPOSITORY }}:qa
              echo 'Stopping and removing existing container...'
              sudo docker stop myapp || true
              sudo docker rm myapp || true
              echo 'Running new container...'
              sudo docker run -d --name myapp -p $PORT:$PORT ${{ env.DOCKER_REPOSITORY }}:qa
            "
            echo "Deployment to $HOST completed."
            PORT=$((PORT + 1))
          done
          echo "QA Docker images deployed successfully."

  # Job 3: Despliegue en Producción
  deploy-to-prod:
    needs: build-and-push
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Production Image to EC2 Hosts
        run: |
          echo "Deploying Production Docker images to EC2 Hosts..."
          echo "${{ secrets.EC2_KEY_PROD }}" > /tmp/prod_key
          chmod 600 /tmp/prod_key
          PORT=${{ env.PROD_APP_PORT }}
          for HOST in "${{ secrets.EC2_HOST_PROD_1 }},${{ secrets.EC2_HOST_PROD_2 }},${{ secrets.EC2_HOST_PROD_3 }},${{ secrets.EC2_HOST_PROD_4 }}"; do
            echo "Deploying to $HOST on port $PORT..."
            ssh -o StrictHostKeyChecking=no -i /tmp/prod_key ec2-user@$HOST "
              if ! command -v docker &> /dev/null; then
                echo 'Installing Docker...'
                sudo yum update -y
                sudo yum install -y docker
                sudo service docker start
                sudo usermod -aG docker ec2-user
              fi
              echo 'Pulling Production Docker image...'
              sudo docker pull ${{ env.DOCKER_REPOSITORY }}:prod
              echo 'Stopping and removing existing container...'
              sudo docker stop myapp || true
              sudo docker rm myapp || true
              echo 'Running new container...'
              sudo docker run -d --name myapp -p $PORT:$PORT ${{ env.DOCKER_REPOSITORY }}:prod
            "
            echo "Deployment to $HOST completed."
            PORT=$((PORT + 1))
          done
          echo "Production Docker images deployed successfully."
