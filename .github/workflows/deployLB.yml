name: Deploy to EC2 from DockerHub

on:
  push:
    branches:
      - QA
  pull_request:
    branches:
      - main

env:
  DOCKER_REPOSITORY: ztencontacto/myapp
  QA_APP_PORT: 4568
  PROD_APP_PORT: 4568

jobs:
  # Job 1: Construcción y publicación en DockerHub
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [qa, prod] # Etiquetas definidas directamente en minúsculas

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image for ${{ matrix.environment }}..."
          docker build -t ${{ env.DOCKER_REPOSITORY }}:${{ matrix.environment }} .
          echo "Pushing Docker image to DockerHub..."
          docker push ${{ env.DOCKER_REPOSITORY }}:${{ matrix.environment }}
          echo "Docker image built and pushed successfully for ${{ matrix.environment }}."

  # Job 2: Despliegue en QA
  deploy-to-qa:
    needs: build-and-push
    if: github.ref == 'refs/heads/QA'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy QA Image to EC2 Host 1
        run: |
          echo "Deploying QA Docker image to EC2 Host 1..."
          echo "${{ secrets.EC2_KEY_QA }}" > /tmp/qa_key
          chmod 600 /tmp/qa_key
          ssh -o StrictHostKeyChecking=no -i /tmp/qa_key ec2-user@${{ secrets.EC2_HOST_QA_1 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling QA Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:qa
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.QA_APP_PORT }}:${{ env.QA_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:qa
          "
          echo "Deployment to EC2 Host 1 completed."

      - name: Deploy QA Image to EC2 Host 2
        run: |
          echo "Deploying QA Docker image to EC2 Host 2..."
          echo "${{ secrets.EC2_KEY_QA }}" > /tmp/qa_key
          chmod 600 /tmp/qa_key
          ssh -o StrictHostKeyChecking=no -i /tmp/qa_key ec2-user@${{ secrets.EC2_HOST_QA_2 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling QA Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:qa
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.QA_APP_PORT }}:${{ env.QA_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:qa
          "
          echo "Deployment to EC2 Host 2 completed."

  # Job 3: Despliegue en Producción
  deploy-to-prod:
    needs: build-and-push
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Production Image to EC2 Host 1
        run: |
          echo "Deploying Production Docker image to EC2 Host 1..."
          echo "${{ secrets.EC2_KEY_PROD }}" | tr -d '\r' > /tmp/prod_key
          chmod 600 /tmp/prod_key
          ssh -o StrictHostKeyChecking=no -i /tmp/prod_key ec2-user@${{ secrets.EC2_HOST_PROD_1 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling Production Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:prod
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.PROD_APP_PORT }}:${{ env.PROD_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:prod
          "
          rm -f /tmp/prod_key
          echo "Deployment to EC2 Host 1 completed."

      - name: Deploy Production Image to EC2 Host 2
        run: |
          echo "Deploying Production Docker image to EC2 Host 2..."
          echo "${{ secrets.EC2_KEY_PROD }}" > /tmp/prod_key
          chmod 600 /tmp/prod_key
          ssh -o StrictHostKeyChecking=no -i /tmp/prod_key ec2-user@${{ secrets.EC2_HOST_PROD_2 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling Production Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:prod
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.PROD_APP_PORT }}:${{ env.PROD_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:prod
          "
          echo "Deployment to EC2 Host 2 completed."

      - name: Deploy Production Image to EC2 Host 3
        run: |
          echo "Deploying Production Docker image to EC2 Host 3..."
          echo "${{ secrets.EC2_KEY_PROD }}" > /tmp/prod_key
          chmod 600 /tmp/prod_key
          ssh -o StrictHostKeyChecking=no -i /tmp/prod_key ec2-user@${{ secrets.EC2_HOST_PROD_3 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling Production Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:prod
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.PROD_APP_PORT }}:${{ env.PROD_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:prod
          "
          echo "Deployment to EC2 Host 3 completed."

      - name: Deploy Production Image to EC2 Host 4
        run: |
          echo "Deploying Production Docker image to EC2 Host 4..."
          echo "${{ secrets.EC2_KEY_PROD }}" > /tmp/prod_key
          chmod 600 /tmp/prod_key
          ssh -o StrictHostKeyChecking=no -i /tmp/prod_key ec2-user@${{ secrets.EC2_HOST_PROD_4 }} "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            echo 'Pulling Production Docker image...'
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}:prod
            echo 'Stopping and removing existing container...'
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            echo 'Running new container...'
            sudo docker run -d --name myapp -p ${{ env.PROD_APP_PORT }}:${{ env.PROD_APP_PORT }} ${{ env.DOCKER_REPOSITORY }}:prod
          "
          echo "Deployment to EC2 Host 4 completed."
